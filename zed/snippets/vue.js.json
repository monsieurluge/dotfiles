{
    "basic component": {
        "body": [
            "<template>",
            "    <quote>todo: component</quote>",
            "</template>",
            "",
            "<script setup lang=\"ts\">",
            "    $0",
            "</script>",
            "",
            "<style scoped>",
            "</style>"
        ],
        "description": "vue component",
        "prefix": "_component"
    },
    "full component example": {
        "body": [
            "<script setup lang=\"ts\">",
            "    import { ref } from 'vue'",
            "    import MyComponent from './MyComponent.vue'",
            "",
            "    const props = defineProps({",
            "        foo: String",
            "    })",
            "    const emit = defineEmits(['change', 'delete'])",
            "    const count = ref(0)",
            "    $0",
            "</script>",
            "",
            "<template>",
            "    <MyComponent />",
            "    <button @click=\"count++\">{{ count }}</button>",
            "</template>",
            "",
            "<style lang=\"scss\" scoped>",
            "</style>"
        ],
        "description": "vue component example",
        "prefix": "_component-example"
    },
    "emits declaration": {
        "body": [
            "const emit = defineEmits<{",
            "    change: [id: number],",
            "    update: [value: string],",
            "    $0",
            "}>()"
        ],
        "description": "vue emits declaration",
        "prefix": "_emit"
    },
    "for loop": {
        "body": [
            "<div v-for=\"(item, index)$0 in items\" :key=\"index\">",
            "    {{ item }}",
            "</div>"
        ],
        "description": "vue for loop",
        "prefix": "_for"
    },
    "props declaration": {
        "body": [
            "const props = defineProps({",
            "    foo: string,",
            "    bar?: number,",
            "    $0",
            "})"
        ],
        "description": "vue props declaration",
        "prefix": "_props"
    },
    "props with defaults declaration": {
        "body": [
            "withDefaults(",
            "  defineProps<{",
            "    layout: 'horizontal' | 'vertical'",
            "  }>(),",
            "  {",
            "    layout: 'vertical',",
            "  }",
            ")"
        ],
        "description": "vue props with defaults",
        "prefix": "_propsdefaults"
    },
    "reactive model initialization": {
        "body": [
            "const rolesModel = reactive({",
            "  ...Object.fromEntries(",
            "      adminRoles.map((role) => [role, toValue(userGroup).roles.includes(role)])",
            "  ),",
            "})"
        ],
        "description": "reactive model initialization",
        "prefix": "_modelreactive"
    }
}
